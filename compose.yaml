services:
  # Order Service

  order-service:
    build:
      context: .
      dockerfile: docker/order-service/Dockerfile
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=${ORDERS_SPRING_PROFILES_ACTIVE}
      - JAVA_OPTS=${JAVA_OPTS}
      - DB_URL=jdbc:postgresql://order-db:5432/${ORDERS_DB_NAME}
      - DB_PASS=${ORDERS_DB_PASSWORD}
      - DB_USER=${ORDERS_DB_USERNAME}
      - PORT=8080
    ports:
      - ${ORDERS_PORT}:8080
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      order-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 10

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: docker/payment-service/Dockerfile
    container_name: payment-service
    ports:
      - ${PAYMENTS_PORT}:8080
    depends_on: 
      payment-db:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=${PAYMENTS_SPRING_PROFILES_ACTIVE}
      - JAVA_OPTS=${JAVA_OPTS}
      - DB_URL=jdbc:postgresql://payment-db:5432/${PAYMENTS_DB_NAME}
      - DB_PASS=${PAYMENTS_DB_PASSWORD}
      - DB_USER=${PAYMENTS_DB_USERNAME}
      - PORT=8080
    deploy:
      resources:
        limits: 
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 10


  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: docker/notification-service/Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=${NOTIFICATIONS_SPRING_PROFILES_ACTIVE}
      - JAVA_OPTS=${JAVA_OPTS}
      - PORT=8080
    ports:
      - ${NOTIFICATIONS_PORT}:8080
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 10
  # Orders Redis Chache Servis
    

  # Order Database Service
  order-db:
    image: postgres:17
    container_name: order-db
    environment:
      - POSTGRES_DB=${ORDERS_DB_NAME}
      - POSTGRES_USER=root${ORDERS_DB_USERNAME}
      - POSTGRES_PASSWORD=${ORDERS_DB_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - orders:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d  $ORDERS_DB_NAME -U $ORDERS_DB_USERNAME"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 10

  # Payment Database Service
  payment-db:
    image: postgres:17
    container_name: payment-db
    environment:
      - POSTGRES_DB=${PAYMENTS_DB_NAME}
      - POSTGRES_USER=${PAYMENTS_DB_USERNAME}
      - POSTGRES_PASSWORD=${PAYMENTS_DB_PASSWORD}
    ports:
      - 5433:5432
    volumes:
      - payments:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $PAYMENTS_DB_NAME -U $PAYMENTS_DB_USERNAME"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 10

  # Kafka Service


networks:
  default:
    name: shop
    driver: bridge

volumes:
  orders:
  payments: 