services:
  # Order Service
  order-service:
    build:
      context: .
      dockerfile: .docker/order-service/Dockerfile
    container_name: order-service
    depends_on:
      order-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_OPTS=${JAVA_OPTS}
      - DB_URL=jdbc:postgresql://order-db:5432/${ORDERS_DB_NAME}
      - DB_PASS=${ORDERS_DB_PASSWORD}
      - DB_USER=${ORDERS_DB_USERNAME}
      - PORT=8080
      - BOOTSTRAP_SERVER=broker:9092
    ports:
      - ${ORDERS_PORT}:8080
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      start_period: 60s
      interval: 5s
      timeout: 5s
      retries: 10

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: .docker/payment-service/Dockerfile
    container_name: payment-service
    depends_on: 
      payment-db:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      - JAVA_OPTS=${JAVA_OPTS}
      - DB_URL=jdbc:postgresql://payment-db:5432/${PAYMENTS_DB_NAME}
      - DB_PASS=${PAYMENTS_DB_PASSWORD}
      - DB_USER=${PAYMENTS_DB_USERNAME}
      - PORT=8080
    ports:
      - ${PAYMENTS_PORT}:8080
    deploy:
      resources:
        limits: 
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 10


  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: .docker/notification-service/Dockerfile
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=${NOTIFICATIONS_SPRING_PROFILES_ACTIVE}
      - JAVA_OPTS=${JAVA_OPTS}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
      - BOOTSTRAP_SERVER=broker:9092
      - PORT=8080
    ports:
      - 8080
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 10
  # Orders Redis Chache Servis
    

  # Order Database Service
  order-db:
    image: postgres:17
    container_name: order-db
    environment:
      - POSTGRES_DB=${ORDERS_DB_NAME}
      - POSTGRES_USER=root${ORDERS_DB_USERNAME}
      - POSTGRES_PASSWORD=${ORDERS_DB_PASSWORD}
    ports:
      - ${ORDERS_DB_PORT}:5432
    volumes:
      - orders:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d  $ORDERS_DB_NAME -U $ORDERS_DB_USERNAME"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 10

  # Payment Database Service
  payment-db:
    image: postgres:17
    container_name: payment-db
    environment:
      - POSTGRES_DB=${PAYMENTS_DB_NAME}
      - POSTGRES_USER=${PAYMENTS_DB_USERNAME}
      - POSTGRES_PASSWORD=${PAYMENTS_DB_PASSWORD}
    ports:
      - ${PAYMENTS_DB_PORT}:5432
    volumes:
      - payments:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $PAYMENTS_DB_NAME -U $PAYMENTS_DB_USERNAME"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 10

  # Kafka Service
  broker:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      PATH: ${PATH}:/opt/kafka/bin
    ports:
      - 9092:9092
    healthcheck: 
      test: ["CMD-SHELL", "kafka-cluster.sh cluster-id --bootstrap-server localhost:9092 || exit 1"]
      start_period: 30s
      interval: 5s
      timeout: 5s
      retries: 10





networks:
  default:
    name: shop
    driver: bridge

volumes:
  orders:
  payments: 